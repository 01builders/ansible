import { stringToPath } from "@cosmjs/crypto";
import fs from "fs";
import { ethers } from 'ethers'
import { Wallet, utils } from "ethers";

const HOME = "/config";

function createAndReadMnemonic(path, label) {
  // Create mnemonic file if it doesn't exist
  if (!fs.existsSync(path)) {
    fs.mkdirSync(HOME, { recursive: true });
    const mnemonic = Wallet.fromMnemonic(
      utils.entropyToMnemonic(utils.randomBytes(32))
    ).mnemonic.phrase;
    fs.writeFileSync(path, mnemonic);
  }

  // Read and display mnemonic
  const mnemonic = fs.readFileSync(path, "utf8");
  console.log(`======================== faucet ${label} =========================`);
  console.log(mnemonic);
  console.log("==================================================================");

  return mnemonic;
}

{% for chain in testnet_services_testnets %}
const mnemonic_{{ (chain.chain | replace('-', '_')) }} = createAndReadMnemonic(`${HOME}/mnemonic_{{ (chain.chain | replace('-', '_')) }}.txt`, "mnemonic_{{ (chain.chain | replace('-', '_')) }}");
{% endfor %}

export default {
  port: 8088, // http port
  db: {
    path: `${HOME}/history.db`, // save request states
  },
  project: {
    name: "Binary Builders Testnets Faucet",
    logo: "https://raw.githubusercontent.com/01builders/binary.builders/refs/heads/main/binary-icon-rounded.png",
    deployer: `<a href="https://binary.builders/">Binary Builders</a>`,
  },
  blockchains: [
{% for chain in testnet_services_testnets %}
    {
      name: "{{ chain.chain }}",
      endpoint: {
        // make sure that CORS is enabled in rpc section in config.toml
        // cors_allowed_origins = ["*"]
        rpc_endpoint: "https://{{ chain.chain }}-testnet-rpc.interchainsdk.io:443/",
      },
      sender: {
        mnemonic: mnemonic_{{ (chain.chain | replace('-', '_')) }},
        option: {
          hdPaths: [stringToPath("m/44'/118'/0'/0/0")],
          prefix: "cosmos", // human readable address prefix
        },
      },
      tx: {
        amount: [
          {
            denom: "stake",
            amount: "1000000",
          }
        ],
        fee: {
          amount: [
            {
              amount: "50",
              denom: "stake",
            },
          ],
          gas: "200000",
        },
      },
      limit: {
        // how many times each wallet address is allowed in a window(24h)
        address: 1,
        // how many times each ip is allowed in a window(24h),
        // if you use proxy, double check if the req.ip is return client's ip.
        ip: 10,
      },
    },
{% endfor %}
  ],
};
