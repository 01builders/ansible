---
- name: Quadlet
  block:
    - name: Configuration | Check configuration file | {{ item.name | replace('-node', '') }}
      ansible.builtin.stat:
        path: "{{ testnet_config_dir }}/config.toml"
      register: file_status

    - name: Configuration | Bootstrap node if configuration file does not exist | {{ item.name | replace('-node', '') }}
      when: not file_status.stat.exists
      block:
        - name: Configuration | Start cosmos node
          ansible.builtin.systemd_service:
            name: "{{ testnet_container_name }}"
            daemon_reload: true
            state: started

        - name: Configuration| Wait for container to be ready | {{ item.name | replace('-node', '') }}
          ansible.builtin.pause:
            seconds: 10
      rescue:
        - name: Configuration | Something went wrong | {{ item.name | replace('-node', '') }}
          ansible.builtin.fail:
            msg: An error occured
          when: not ansible_check_mode

    - name: Configuration | config.toml | {{ item.name | replace('-node', '') }}
      ansible.builtin.replace:
        path: "{{ testnet_config_dir }}/config.toml"
        regexp: "{{ index.regexp }}"
        replace: "{{ index.line }}"
      notify: Restart Cosmos node {{ testnet_container_name }}
      loop:
        # Enforce tendermint namespace for consistency
        - regexp: ^namespace =.*$
          line: namespace = "tendermint"
        # Adjust Inbound Peers
        - regexp: ^max_num_inbound_peers =.*$
          line: max_num_inbound_peers = 80
        # Adjust Outbound Peers
        - regexp: ^max_num_outbound_peers =.*$
          line: max_num_outbound_peers = 60
        # Enable prometheus
        - regexp: ^prometheus =.*$
          line: prometheus = true
        # Listen on 0.0.0.0 (RPC)
        - regexp: (^\[rpc\]\n\n# TCP or UNIX socket address for the RPC server to listen on\n)laddr = "tcp://[^"]*"
          line: \1laddr = "tcp://0.0.0.0:26657"
        # Allow cross-domain requests
        - regexp: ^cors_allowed_origins =.*$
          line: cors_allowed_origins = ["*"]
      loop_control:
        loop_var: index

    - name: Configuration | app.toml | generic | {{ item.name | replace('-node', '') }}
      ansible.builtin.replace:
        path: "{{ testnet_config_dir }}/app.toml"
        regexp: "{{ index.regexp }}"
        replace: "{{ index.line }}"
      notify: Restart Cosmos node {{ testnet_container_name }}
      loop:
        # Listen on 0.0.0.0 (gRPC)
        - regexp: (^# Address defines the gRPC server address to bind to.\n)address = .*$
          line: \1address = ":9090"
      loop_control:
        loop_var: index

    - name: Configuration | app.toml | not v2 | {{ item.name | replace('-node', '') }}
      when: testnet_container_name != "v2-052-1-node"
      ansible.builtin.replace:
        path: "{{ testnet_config_dir }}/app.toml"
        regexp: "{{ index.regexp }}"
        replace: "{{ index.line }}"
      notify: Restart Cosmos node {{ testnet_container_name }}
      loop:
        # Listen on 0.0.0.0 instead of localhost (API)
        - regexp: (^# Address defines the API server to listen on.\n)address = "tcp://[^"]*"
          line: \1address = "tcp://0.0.0.0:1317"
      loop_control:
        loop_var: index

    - name: Configuration | app.toml | v2 | {{ item.name | replace('-node', '') }}
      when: testnet_container_name == "v2-052-1-node"
      ansible.builtin.replace:
        path: "{{ testnet_config_dir }}/app.toml"
        regexp: "{{ index.regexp }}"
        replace: "{{ index.line }}"
      notify: Restart Cosmos node {{ testnet_container_name }}
      loop:
        # Listen on 0.0.0.0 instead of localhost (gRPC-gateway)
        - regexp: (^# Address defines the address the gRPC-gateway server binds to.\n)address = .*$
          line: \1address = "0.0.0.0:1317"
      loop_control:
        loop_var: index

  rescue:
    - name: Healthchecks.io | Send a fail signal
      when: semaphore_scheduled is defined and semaphore_scheduled | bool
      community.healthchecksio.ping:
        state: present
        uuid: "{{ testnet_healthchecks_uuid }}"
        signal: fail
        api_key: "{{ healthchecksio_api_key }}"
      changed_when: false

    - name: Something went wrong
      ansible.builtin.fail:
        msg: An error occured
      when: not ansible_check_mode
